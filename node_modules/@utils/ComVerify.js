"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComVerify = void 0;
const is_color_1 = __importDefault(require("is-color"));
const is_1 = require("./is");
class ComV {
}
class UserV {
    static name_(_str = '') {
        return ComVerify.lengthV(_str, [1, 15], '用户名字');
    }
    static account(_str = '') {
        return ComVerify.lengthV(_str, [3, 18], '用户账户');
    }
    static password(_str = '') {
        return ComVerify.lengthV(_str, [6, 20], '用户密码');
    }
    static state(_str = '') {
        return ComVerify.lengthV(_str, [0, 100], '用户状态');
    }
    static introduction(_str = '') {
        return ComVerify.lengthV(_str, [0, 200], '个人简介');
    }
    static memoData(_str = '') {
        return '';
    }
    static socialData(_str = '') {
        return '';
    }
    static themeData(_str = '') {
        return '';
    }
}
class BlogV {
    static title(_str = '') {
        return ComVerify.lengthV(_str, [1, 200], '博客标题');
    }
    static content(_str = '') {
        return ComVerify.lengthV(_str, [1, 1000 * 1024], '博客内容');
    }
    static tabIds(_tabs) {
        return '';
    }
    static externalLink(_str = '') {
        return ComVerify.lengthV(_str, [1, 300], '链接') || ComVerify.urlV(_str);
    }
}
class BlogTabV {
    static name_(_str = '') {
        return ComVerify.lengthV(_str, [1, 10], '标签名字');
    }
    static color(_str = '') {
        return ComVerify.colorV(_str, '标签颜色');
    }
}
class MemoV {
    static title(_str = '') {
        return ComVerify.lengthV(_str, [1, 100], '便签标题');
    }
    static content(_str = '') {
        return ComVerify.lengthV(_str, [1, 10000], '便签内容');
    }
}
class DiaryV {
    static title(_str = '') {
        return ComVerify.lengthV(_str, [1, 100], '日记标题');
    }
    static content(_str = '') {
        return ComVerify.lengthV(_str, [1, 10000], '日记内容');
    }
}
class BulletCommentV {
    static color(_str = '') {
        return ComVerify.colorV(_str, '弹幕颜色');
    }
    static content(_str = '') {
        return ComVerify.lengthV(_str, [1, 100], '弹幕内容');
    }
}
class BlogCommentV {
    static content(_str = '') {
        return ComVerify.lengthV(_str, [1, 3000], '评论内容');
    }
    static name_(_str = '') {
        return ComVerify.lengthV(_str, [1, 50], '评论名字');
    }
    static img(_str = '') {
        return '';
    }
}
class DiarySupplementV {
    static content(_str = '') {
        return ComVerify.lengthV(_str, [1, 3000], '补充内容');
    }
}
/**
 * 公共验证
 */
class ComVerify {
    /**
     * 颜色验证
     * @param _str
     * @param _title
     * @returns
     */
    static colorV(_str, _title) {
        return (0, is_color_1.default)(_str) ? '' : `${_title}必须是正确的颜色值`;
    }
    /**
     * 长度验证
     * @param _str
     * @param _g
     * @param _title
     */
    static lengthV(_str, _g, _title) {
        if (_str.length < _g[0]) {
            if (_g[0] == 1) {
                return `${_title}不能为空`;
            }
            return `${_title}长度不能少于${_g[0]}个字符`;
        }
        if (_str.length > _g[1]) {
            return `${_title}长度不能超过${_g[1]}个字符`;
        }
        return '';
    }
    /**
     *
     * @param _str 路径验证
     */
    static urlV(_str) {
        if ((0, is_1.isUrl)(_str)) {
            return '';
        }
        return '路径格式有误';
    }
}
exports.ComVerify = ComVerify;
/** 公共验证 */
ComVerify.ComV = ComV;
/** 用户验证 */
ComVerify.UserV = UserV;
/** 博客验证 */
ComVerify.BlogV = BlogV;
/** 博客标签验证 */
ComVerify.BlogTabV = BlogTabV;
/** 便签验证 */
ComVerify.MemoV = MemoV;
/** 日记验证 */
ComVerify.DiaryV = DiaryV;
/** 弹幕验证 */
ComVerify.BulletCommentV = BulletCommentV;
/** 博客评论验证 */
ComVerify.BlogCommentV = BlogCommentV;
/** 日记补充验证 */
ComVerify.DiarySupplementV = DiarySupplementV;
